{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

    "Main CPP code snippet" : 
    {
        "prefix": "cpp",
        "body": 
        [
            "#include <bits/stdc++.h>",

            "#define fast ios_base::sync_with_stdio(false)",
            "#define clr cin.tie(NULL)",

            "#define i1(x) cin >> x",
            "#define i2(x,y) cin >> x >> y",
            "#define i3(x,y,z) cin >> x >> y >> z",
            "#define i4(w,x,y,z) cin >> w >> x >> y >> z",
            "#define i5(w,x,y,z,a) cin >> w >> x >> y >> z >> a",
            "#define min_pq(x) priority_queue<x, vector<x>, greater<x> >",
            "#define max_pq(x) priority_queue<x>",
            "#define t_st clock_t start = clock();",
            "#define t_en clock_t stop = clock();",
            "#define t_p double duration = double(stop-start) / double(CLOCKS_PER_SEC); printf(\"%.10f\n\",duration);",

            "#define os(x) cout << x << \" \" ",
            "#define o(x) cout << x",
            "#define ol(x) cout << x << \"\n\" ",

            "#define ulli unsigned long long int //64",
            "#define lli long long int //64",
            "#define uli unsigned long int //32",
            "#define li long int //32",
            "#define pi 3.1415926535897932384626433832795",

            "using namespace std;",

            "int main()",
            "{",
                "   fast;",
                "   clr;",

                "   #ifndef ONLINE_JUDGE",
                "   freopen(\"input.txt\", \"r\", stdin);",
                "   #endif",

                "   int test;", 
                "   i1(test);",
                
                "   while(test--)",
                "   {",
                    
                "   }",

                "   return 0;",
            "}"
        ],
        "description": "CPP code snippet"
    },

    "Print to console 1": 
    {
        "prefix": "ol1",
        "body": [
            "cout << << endline;"
        ],
        "description": "Output to console"
    },

    "Print to console 2": 
    {
        "prefix": "ol2",
        "body": [
            "cout << << << endline;"
        ],
        "description": "Output to console"
    },

    "Print to console 3": 
    {
        "prefix": "ol3",
        "body": [
            "cout << << << << endline;"
        ],
        "description": "Output to console"
    },

    "Print to console without new line 1": 
    {
        "prefix": "os1",
        "body": [
            "cout << << ;"
        ],
        "description": "Output to console"
    },

    "Print to console without new line 2": 
    {
        "prefix": "os2",
        "body": [
            "cout << << << ;"
        ],
        "description": "Output to console"
    },

    "Print to console without new line 3": 
    {
        "prefix": "os3",
        "body": [
            "cout << << << << ;"
        ],
        "description": "Output to console"
    },

    "Take one input": 
    {
        "prefix": "i1",
        "body": [
            "cin >> ;"
        ],
        "description": "Take input"
    },

    "Take two input": 
    {
        "prefix": "i2",
        "body": [
            "cin >> >> ;"
        ],
        "description": "Take input"
    },

    "Take three input": 
    {
        "prefix": "i3",
        "body": [
            "cin >> >> >> ;"
        ],
        "description": "Take input"
    },

    "Take four input": 
    {
        "prefix": "i4",
        "body": [
            "cin >> >> >> >>;"
        ],
        "description": "Take input"
    },

    "Take five input": 
    {
        "prefix": "i5",
        "body": [
            "cin >> >> >> >> >>;"
        ],
        "description": "Take input"
    },

    "Max priority queue": 
    {
        "prefix": "pqmax",
        "body": [
            "priority_queue< > ;"
        ],
        "description": "Max priority queue"
    },

    "Min priority queue": 
    {
        "prefix": "pqmax",
        "body": [
            "priority_queue< , vector< >, greater< > > ;"
        ],
        "description": "Min priority queue"
    },

    "Vector": 
    {
        "prefix": "v",
        "body": [
            "vector< > ;"
        ],
        "description": "Vector"
    },

    "Vector of pair": 
    {
        "prefix": "vp",
        "body": [
            "vector< pair< , > > ;"
        ],
        "description": "Vector of pair"
    },

    "Set": 
    {
        "prefix": "s",
        "body": [
            "set< > ;"
        ],
        "description": "Set"
    },

    "Map": 
    {
        "prefix": "m",
        "body": [
            "map< , > ;"
        ],
        "description": "Map"
    },
}